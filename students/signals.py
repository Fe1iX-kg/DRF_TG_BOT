from django.db.models.signals import post_save, post_delete, m2m_changed, pre_save
from django.dispatch import receiver
from .models import Student
from .utils import send_telegram_message


@receiver(post_save, sender=Student)
def notify_on_student_save(sender, instance, created, **kwargs):
    full_name = f"{instance.first_name} {instance.last_name}"
    if created:
        message = f"üì• –ù–æ–≤—ã–π —Å—Ç—É–¥–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {full_name}, {instance.age} –ª–µ—Ç"
    else:
        message = f"‚úèÔ∏è –°—Ç—É–¥–µ–Ω—Ç –æ–±–Ω–æ–≤–ª—ë–Ω: {full_name}, {instance.age} –ª–µ—Ç"
        if instance.group:
            message += f", –≥—Ä—É–ø–ø–∞: {instance.group.name}"
    send_telegram_message(message)


@receiver(post_delete, sender=Student)
def notify_on_student_delete(sender, instance, **kwargs):
    full_name = f"{instance.first_name} {instance.last_name}"
    message = f"üóë –°—Ç—É–¥–µ–Ω—Ç —É–¥–∞–ª—ë–Ω: {full_name}"
    send_telegram_message(message)


@receiver(m2m_changed, sender=Student.courses.through)
def notify_on_courses_changed(sender, instance, action, pk_set, **kwargs):
    full_name = f"{instance.first_name} {instance.last_name}"
    if action == "post_add":
        message = f"‚ûï –ö—É—Ä—Å—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–ª—è {full_name}: {', '.join(str(pk) for pk in pk_set)}"
    elif action == "post_remove":
        message = f"‚ûñ –ö—É—Ä—Å—ã —É–¥–∞–ª–µ–Ω—ã –¥–ª—è {full_name}: {', '.join(str(pk) for pk in pk_set)}"
    elif action == "post_clear":
        message = f"üßπ –í—Å–µ –∫—É—Ä—Å—ã —É–¥–∞–ª–µ–Ω—ã –¥–ª—è {full_name}"
    send_telegram_message(message)


@receiver(pre_save, sender=Student)
def notify_on_group_change(sender, instance, **kwargs):
    if instance.pk:
        try:
            old_instance = Student.objects.get(pk=instance.pk)
            old_group = old_instance.group
            new_group = instance.group
            if old_group != new_group:
                full_name = f"{instance.first_name} {instance.last_name}"
                if new_group:
                    message = f"üë• –°—Ç—É–¥–µ–Ω—Ç {full_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {new_group.name}"
                else:
                    message = f"üë• –°—Ç—É–¥–µ–Ω—Ç {full_name} —É–¥–∞–ª—ë–Ω –∏–∑ –≥—Ä—É–ø–ø—ã {old_group.name}"
                send_telegram_message(message)
        except Student.DoesNotExist:
            pass